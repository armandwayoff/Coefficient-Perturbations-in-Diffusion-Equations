verbosity = 0;	

include "ffmatlib.idp"
load "ffrandom"

srandomdev();

real maxrang = 2^31 - 1;
// random() / maxrang < p

macro PP P1 //
macro Pcb P0 //

bool PlotSolAppr = 1;


// plot the solutions for the stange spike 
// root mean square

// 9, 27, 81, 243
real nds = 27; // number of mesh points on one domain unity edge
real ncb = 27; // size of the checkboard coefficient (odd)
int cbsize = (ncb - 1) / 2;
int cbdensity = 2;

real alpha = 1.;
real beta = 0.;
real p = 0.99;

func gd = 0;  // boundary condition gd

mesh Thcb = square(ncb, ncb);
fespace Vhcb(Thcb, Pcb);

real amax = 10.0, amin = 1.0;

Vhcb acoeff, acoeffp;

real[int] randomcoeff(Thcb.nt); 

real[int] randomcoeffx(ncb*ncb); 
real[int] randomcoeffy(ncb*ncb);

int defectscounter = 0; 

for (int ix = 0; ix < ncb; ix++) {
    for (int iy = 0; iy < ncb; iy++) {
        if ((ix + 1) % cbdensity == 0 && (iy + 1) % cbdensity == 0) {
        // if ((ix > 0 && iy > 0) && (ix < ncb - 1 && iy < ncb - 1) && ((ix + 1) % cbdensity == 1 && (iy + 1) % cbdensity == 1 || (ix + 1) % cbdensity == 0 && (iy + 1) % cbdensity == 0)) {
            int r = (random() / maxrang < p);
            if (r == 0) {
                randomcoeffx[defectscounter] = ix;
                randomcoeffy[defectscounter] = iy;
                defectscounter++;
            }
            // cout<<"r : "<<r<<endl;
            for (int i = 0; i < Thcb.nt; i++) {
                real xc = Thcb[i][0].x; 
                real yc = Thcb[i][0].y; 
                if (floor(xc * ncb) == ix && floor(yc * ncb) == iy) {
                    randomcoeff[i] = r;
                    // cout<<"i : "<<i<<", "<<r<<endl;
                }                
            }
        }
    }
}
cout<<"Number of defects : "<<defectscounter<<endl;

for (int i = 0; i < Thcb.nt; i++) {
    real xc = Thcb[i][0].x; // x-coordinate of the element center
    real yc = Thcb[i][0].y; // y-coordinate of the element center

    int ix = floor(xc * ncb); // x-index of the grid cell
    int iy = floor(yc * ncb); // y-index of the grid cell

    // Construction of the "perfect" coefficient acoeff (cherckerboard pattern) and of the "perturbed" coefficient acoeffp
    if ((ix + 1) % cbdensity == 0 && (iy + 1) % cbdensity == 0) {
    // if ((ix > 0 && iy > 0) && (ix < ncb - 1 && iy < ncb - 1) && ((ix + 1) % cbdensity == 1 && (iy + 1) % cbdensity == 1 || (ix + 1) % cbdensity == 0 && (iy + 1) % cbdensity == 0)) {
        if (randomcoeff[i] == 1) {
            acoeffp[][i] = amax;
        } else {
            acoeffp[][i] = amin;
        }
        acoeff[][i] = amax;
    } else {
        acoeffp[][i] = amin;
        acoeff[][i] = amin;
    }
}

Vhcb[int] offlincoeff(defectscounter); 
Vhcb aminfun = amin;

for (int ndefects = 0; ndefects < defectscounter; ndefects++) {
    for (int i = 0; i < Thcb.nt; i++) {
        real xc = Thcb[i][0].x; 
        real yc = Thcb[i][0].y; 

        int ix = floor(xc * ncb); 
        int iy = floor(yc * ncb);

        if (ix == randomcoeffx[ndefects] && iy == randomcoeffy[ndefects]) {
            offlincoeff[ndefects][][i] = amax;
        } else {
            offlincoeff[ndefects][][i] = amin;
        }
    }
    // Comment the following line to compute the perturbations
    offlincoeff[ndefects] = acoeff - offlincoeff[ndefects] + aminfun;
}
//**************************************
//   USEFUL SETTINGS
//**************************************

// macro definitions
macro Div(u1,u2) (dx(u1)+dy(u2)) //
macro Grad(u) [dx(u),dy(u)] //

macro NbIso 21 // number of isovalues for plotting (more than 20 unless FreeFem++ bug fixed)
macro SolverGlob sparsesolver // global system linear solver: CG or sparsesolver 

real em = 0.99, ep = 1.01; // under- and over-shoot for correct visualisation
real sp = 0.11; // extension of the colormap for correct visualisation of the nonconforming finite element approximation

// standard matlab jet colormap
real[int] jet = [0.6667, 1.0000, 0.5625,  0.6667, 1.0000, 0.6250,  0.6667, 1.0000, 0.6875,  0.6667, 1.0000, 0.7500,  0.6667, 1.0000, 0.8125, 0.6667, 1.0000, 0.8750,
 0.6667, 1.0000, 0.9375, 0.6667, 1.0000, 1.0000, 0.6563, 1.0000, 1.0000, 0.6458, 1.0000, 1.0000, 0.6354, 1.0000, 1.0000, 0.6250, 1.0000, 1.0000, 0.6146, 1.0000, 1.0000,
 0.6042, 1.0000, 1.0000, 0.5938, 1.0000, 1.0000, 0.5833, 1.0000, 1.0000, 0.5729, 1.0000, 1.0000, 0.5625, 1.0000, 1.0000, 0.5521, 1.0000, 1.0000, 0.5417, 1.0000, 1.0000,
 0.5313, 1.0000, 1.0000, 0.5208, 1.0000, 1.0000, 0.5104, 1.0000, 1.0000, 0.5000, 1.0000, 1.0000, 0.4889, 0.9375, 1.0000, 0.4762, 0.8750, 1.0000, 0.4615, 0.8125, 1.0000,
 0.4444, 0.7500, 1.0000, 0.4242, 0.6875, 1.0000, 0.4000, 0.6250, 1.0000, 0.3704, 0.5625, 1.0000, 0.3333, 0.5000, 1.0000, 0.2963, 0.5625, 1.0000, 0.2667, 0.6250, 1.0000,
 0.2424, 0.6875, 1.0000, 0.2222, 0.7500, 1.0000, 0.2051, 0.8125, 1.0000, 0.1905, 0.8750, 1.0000, 0.1778, 0.9375, 1.0000, 0.1667, 1.0000, 1.0000, 0.1563, 1.0000, 1.0000,
 0.1458, 1.0000, 1.0000, 0.1354, 1.0000, 1.0000, 0.1250, 1.0000, 1.0000, 0.1146, 1.0000, 1.0000, 0.1042, 1.0000, 1.0000, 0.0938, 1.0000, 1.0000, 0.0833, 1.0000, 1.0000,
 0.0729, 1.0000, 1.0000, 0.0625, 1.0000, 1.0000, 0.0521, 1.0000, 1.0000, 0.0417, 1.0000, 1.0000, 0.0313, 1.0000, 1.0000, 0.0208, 1.0000, 1.0000, 0.0104, 1.0000, 1.0000,
 0, 1.0000, 1.0000, 0, 1.0000, 0.9375, 0, 1.0000, 0.8750, 0, 1.0000, 0.8125, 0, 1.0000, 0.7500, 0, 1.0000, 0.6875, 0, 1.0000, 0.6250, 0, 1.0000, 0.5625, 0, 1.0000, 0.5000]; 

//**************************************
// CODE
//**************************************

if(PlotSolAppr) {
    plot(Thcb, wait=1, cmm="Square domain & Mesh");

    Vhcb avis=acoeff; 
    real[int]isovaluesacoeff=em*avis[].min:(ep*avis[].max-em*avis[].min)/(NbIso-1):ep*avis[].max;
    plot(Thcb, avis, wait=1, value=1, fill=1, viso=isovaluesacoeff, hsv=jet, cmm="Perfect coefficient", dim=2, boundary=false);

    Vhcb apvis=acoeffp; 
    real[int]isovaluesapcoeff=em*apvis[].min:(ep*apvis[].max-em*apvis[].min)/(NbIso-1):ep*apvis[].max;
    plot(Thcb, apvis, wait=1, value=1, fill=1, viso=isovaluesapcoeff, hsv=jet, cmm="Perturbed coefficient", dim=2, boundary=false);

    for (int ndefects = 0; ndefects < defectscounter; ndefects++) {
        Vhcb off = offlincoeff[ndefects];
        string plotname = "Offline coeff n." + ndefects;
        real[int]isovaluesoff=em*off[].min:(ep*off[].max-em*off[].min)/(NbIso-1):ep*off[].max;
        plot(Thcb, off, wait=1, value=1, fill=1, viso=isovaluesoff, hsv=jet, cmm=plotname, dim=2, boundary=false);
    }

    Vhcb reconstruction;
    for (int ndefects = 0; ndefects < defectscounter; ndefects++) {
        reconstruction = reconstruction + offlincoeff[ndefects];
    }
    reconstruction = reconstruction + (1 - defectscounter) * acoeff;
    plot(Thcb, reconstruction, wait=1, value=1, fill=1, viso=isovaluesapcoeff, hsv=jet, cmm="Reconstruction", dim=2, boundary=false);
}


//Save mesh
savemesh(Thcb,"data/meshThcb.msh");
//Save finite element space connectivity
ffSaveVh(Thcb,Vhcb,"data/mesh_vhcb.txt");
//Save scalar data
ffSaveData(acoeff,"data/perfect_coeff.txt");
ffSaveData(acoeffp,"data/perturbed_coeff.txt");
for (int ndefects = 0; ndefects < defectscounter; ndefects++) {
    int n = ndefects + 1;
    string filename = "data/offlincoeff" + n + ".txt";
    ffSaveData(offlincoeff[ndefects],filename);
}